---
import fs from "node:fs/promises";

type Link = { url: string; title: string };
type ContentData = { main: { link: Link; submenu?: Link[] }[] };

const menuJSON = await fs.readFile("src/content/meny.json", "utf-8");
const menu = JSON.parse(menuJSON) as ContentData;
const baseurl = import.meta.env.BASE_URL;
const current = Astro.url.pathname;
---

<nav class="main-nav">
  <div class="nav-container">
    <button class="mobile-menu-toggle" aria-label="Toggle menu">
      <span class="hamburger"></span>
      <span class="hamburger"></span>
      <span class="hamburger"></span>
    </button>
    
    <ul class="menu">
      {
        (() => {
          const anchor = (link: Link) => {
            const url = `${baseurl}/${link.url}`;
            return (
              <a class:list={{ current: current === url }} href={url}>
                {link.title}
              </a>
            );
          };
          return menu.main.map((item) =>
            !item.submenu ? (
              <li>{anchor(item.link)}</li>
            ) : (
              <li class="has-dropdown">
                <span class="dropdown-label">{item.link.title}</span>
                <ul class="dropdown">
                  <li>{anchor(item.link)}</li>
                  {item.submenu.map((subitem) => (
                    <li>{anchor(subitem)}</li>
                  ))}
                </ul>
              </li>
            )
          );
        })()
      }
    </ul>
  </div>
</nav>
<style>
  .main-nav {
    font-family: inherit;
    background: linear-gradient(90deg, #e3eaf3 0%, #b3c9e6 100%);
    box-shadow: 0 2px 8px #0001;
    border-radius: 0.5rem;
    margin-bottom: 2rem;
    width: 100%;
    position: relative;
  }
  
  .nav-container {
    position: relative;
    width: 100%;
  }
  
  .mobile-menu-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1001;
  }
  
  .hamburger {
    display: block;
    width: 25px;
    height: 3px;
    background: #222;
    margin: 5px 0;
    transition: 0.3s;
    border-radius: 2px;
  }
  
  .menu {
    list-style: none;
    margin: 0;
    padding: 0 2rem;
    display: flex;
    gap: 2rem;
    min-height: 3.2rem;
    align-items: center;
    width: 100%;
  }
  
  .menu > li {
    position: relative;
  }
  
  .menu > li > a,
  .dropdown-label {
    text-decoration: none;
    color: #222;
    padding: 0.5rem 1rem;
    display: block;
    cursor: pointer;
    border-radius: 0.3rem;
    transition: background 0.2s;
    white-space: nowrap;
  }
  
  .menu > li > a:hover,
  .dropdown-label:hover {
    background: #d0e3f7;
  }
  
  .current {
    font-weight: bold;
  }
  
  .has-dropdown:hover > .dropdown,
  .has-dropdown:focus-within > .dropdown {
    display: block;
  }
  
  .dropdown {
    display: none;
    position: absolute;
    left: 0;
    top: 100%;
    min-width: 180px;
    background: #fff;
    box-shadow: 0 4px 16px #0002;
    border-radius: 0 0 0.5rem 0.5rem;
    z-index: 100;
    list-style: none;
    margin: 0;
    padding: 0.5rem 0;
  }
  
  .dropdown li {
    width: 100%;
  }
  
  .dropdown a {
    color: #1565c0;
    padding: 0.5rem 1rem;
    display: block;
    text-decoration: none;
    border-radius: 0.3rem;
    transition: background 0.2s;
  }
  
  .dropdown a:hover {
    background: #e3eaf3;
  }
  
  /* Mobile Styles */
  @media (max-width: 768px) {
    .mobile-menu-toggle {
      display: block;
    }
    
    .menu {
      position: fixed;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100vh;
      background: linear-gradient(135deg, #e3eaf3 0%, #b3c9e6 100%);
      flex-direction: column;
      justify-content: flex-start;
      align-items: stretch;
      padding: 4rem 2rem 2rem;
      gap: 0;
      transition: left 0.3s ease;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .menu.active {
      left: 0;
    }
    
    .menu > li {
      width: 100%;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .menu > li:last-child {
      border-bottom: none;
    }
    
    .menu > li > a,
    .dropdown-label {
      padding: 1rem;
      font-size: 1.1rem;
      text-align: center;
      border-radius: 0;
      white-space: normal;
    }
    
    .has-dropdown > .dropdown {
      position: static;
      display: none;
      background: rgba(255, 255, 255, 0.1);
      box-shadow: none;
      border-radius: 0;
      margin: 0;
      padding: 0;
    }
    
    .has-dropdown.active > .dropdown {
      display: block;
    }
    
    .dropdown a {
      padding: 0.8rem 1rem 0.8rem 2rem;
      color: #333;
      font-size: 1rem;
    }
    
    .dropdown a:hover {
      background: rgba(255, 255, 255, 0.2);
    }
    
    /* Hamburger animation */
    .mobile-menu-toggle.active .hamburger:nth-child(1) {
      transform: rotate(-45deg) translate(-5px, 6px);
    }
    
    .mobile-menu-toggle.active .hamburger:nth-child(2) {
      opacity: 0;
    }
    
    .mobile-menu-toggle.active .hamburger:nth-child(3) {
      transform: rotate(45deg) translate(-5px, -6px);
    }
  }
  
  @media (max-width: 480px) {
    .menu {
      padding: 3.5rem 1rem 2rem;
    }
    
    .menu > li > a,
    .dropdown-label {
      padding: 0.8rem;
      font-size: 1rem;
    }
    
    .dropdown a {
      padding: 0.6rem 1rem 0.6rem 1.5rem;
      font-size: 0.9rem;
    }
  }
</style>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', function() {
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const menu = document.querySelector('.menu');
    const dropdownLabels = document.querySelectorAll('.dropdown-label');
    
    if (mobileToggle && menu) {
      mobileToggle.addEventListener('click', function() {
        mobileToggle.classList.toggle('active');
        menu.classList.toggle('active');
      });
    }
    
    // Handle dropdown toggles on mobile
    dropdownLabels.forEach(label => {
      label.addEventListener('click', function(e) {
        e.preventDefault();
        const parent = this.parentElement;
        parent.classList.toggle('active');
      });
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', function(e) {
      if (!mobileToggle.contains(e.target) && !menu.contains(e.target)) {
        mobileToggle.classList.remove('active');
        menu.classList.remove('active');
      }
    });
  });
</script>
